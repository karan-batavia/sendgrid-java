/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Marketing Campaigns Senders API
 * The Twilio SendGrid Marketing Campaigns Senders API allows you to create a verified sender from which your marketing emails will be sent. To ensure our customers maintain the best possible sender reputations and to uphold legitimate sending behavior, we require customers to verify their Senders. A Sender represents your “From” email address—the address your recipients will see as the sender of your emails.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sendgrid.rest.api.v3.mcsenders.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import java.util.StringJoiner;


@ToString
public class PostMarketingSendersRequest {
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("nickname")
    @Getter
    @Setter
    private Object nickname;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("from")
    @Getter
    @Setter
    private PostMarketingSendersRequestAllOfFrom from;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("replyTo")
    @Getter
    @Setter
    private PostMarketingSendersRequestAllOfReplyTo replyTo;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("address")
    @Getter
    @Setter
    private Object address;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("address2")
    @Getter
    @Setter
    private Object address2;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("city")
    @Getter
    @Setter
    private Object city;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("state")
    @Getter
    @Setter
    private Object state;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("zip")
    @Getter
    @Setter
    private Object zip;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("country")
    @Getter
    @Setter
    private Object country;

    public PostMarketingSendersRequest() {
    }

    private PostMarketingSendersRequest(Builder builder) {
        this.nickname = builder.nickname;
        this.from = builder.from;
        this.replyTo = builder.replyTo;
        this.address = builder.address;
        this.address2 = builder.address2;
        this.city = builder.city;
        this.state = builder.state;
        this.zip = builder.zip;
        this.country = builder.country;
    }

    // Builder class for constructing object
    public static class Builder {
        private Object nickname;
        private PostMarketingSendersRequestAllOfFrom from;
        private PostMarketingSendersRequestAllOfReplyTo replyTo;
        private Object address;
        private Object address2;
        private Object city;
        private Object state;
        private Object zip;
        private Object country;

        public Builder(Object nickname, PostMarketingSendersRequestAllOfFrom from, PostMarketingSendersRequestAllOfReplyTo replyTo, Object address, Object city, Object country) {
            this.nickname = nickname;
            this.from = from;
            this.replyTo = replyTo;
            this.address = address;
            this.city = city;
            this.country = country;
        }

        public Builder address2(Object address2) {
            this.address2 = address2;
            return this;
        }

        public Builder state(Object state) {
            this.state = state;
            return this;
        }

        public Builder zip(Object zip) {
            this.zip = zip;
            return this;
        }

        public PostMarketingSendersRequest build() {
            return new PostMarketingSendersRequest(this);
        }

    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(", ", PostMarketingSendersRequest.class.getSimpleName() + "(", ")");
        if (nickname != null) joiner.add("nickname=" + nickname);
        if (from != null) joiner.add("from=" + from);
        if (replyTo != null) joiner.add("replyTo=" + replyTo);
        if (address != null) joiner.add("address=" + address);
        if (address2 != null) joiner.add("address2=" + address2);
        if (city != null) joiner.add("city=" + city);
        if (state != null) joiner.add("state=" + state);
        if (zip != null) joiner.add("zip=" + zip);
        if (country != null) joiner.add("country=" + country);
        return joiner.toString();
    }

}
         
    
