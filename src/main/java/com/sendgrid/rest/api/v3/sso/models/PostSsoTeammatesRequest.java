/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Single Sign-On API
 * The Single Sign-On API allows you to manage your SAML 2.0 SSO configurations. You can also work with your SSO integrations using the SSO section of the [Twilio SendGrid application user interface](https://app.sendgrid.com/settings/sso).  The Single Sign-On Settings operations allow you to create, retrieve, modify, and delete SSO integrations for your Twilio SendGrid account. Each integration will correspond to a specific IdP such as Okta, Duo, or Microsoft Azure Active Directory.  The Single Sign-On Certificates operations allow you to create, modify, and delete SSO certificates. A SAML certificate allows your IdP and Twilio SendGrid to verify requests are coming from one another using the `public_certificate` and `integration_id` parameters.  The Single Sign-On Teammates operations allow you to add and modify SSO Teammates. SSO Teammates are the individual user accounts who will access your Twilio SendGrid account with SSO credentials. To retrieve or delete an SSO Teammate, you will use the separate [Teammates API](https://docs.sendgrid.com/api-reference/teammates/).
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sendgrid.rest.api.v3.sso.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import java.util.StringJoiner;


@ToString
public class PostSsoTeammatesRequest {
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("firstName")
    @Getter
    @Setter
    private Object firstName;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("lastName")
    @Getter
    @Setter
    private Object lastName;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("isAdmin")
    @Getter
    @Setter
    private Object isAdmin;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("persona")
    @Getter
    @Setter
    private Persona persona;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("scopes")
    @Getter
    @Setter
    private Object scopes;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("hasRestrictedSubuserAccess")
    @Getter
    @Setter
    private Object hasRestrictedSubuserAccess;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subuserAccess")
    @Getter
    @Setter
    private Object subuserAccess;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("email")
    @Getter
    @Setter
    private String email;

    public PostSsoTeammatesRequest() {
    }

    private PostSsoTeammatesRequest(Builder builder) {
        this.firstName = builder.firstName;
        this.lastName = builder.lastName;
        this.isAdmin = builder.isAdmin;
        this.persona = builder.persona;
        this.scopes = builder.scopes;
        this.hasRestrictedSubuserAccess = builder.hasRestrictedSubuserAccess;
        this.subuserAccess = builder.subuserAccess;
        this.email = builder.email;
    }

    // Builder class for constructing object
    public static class Builder {
        private Object firstName;
        private Object lastName;
        private Object isAdmin;
        private Persona persona;
        private Object scopes;
        private Object hasRestrictedSubuserAccess;
        private Object subuserAccess;
        private String email;

        public Builder(Object firstName, Object lastName, String email) {
            this.firstName = firstName;
            this.lastName = lastName;
            this.email = email;
        }

        public Builder isAdmin(Object isAdmin) {
            this.isAdmin = isAdmin;
            return this;
        }

        public Builder persona(Persona persona) {
            this.persona = persona;
            return this;
        }

        public Builder scopes(Object scopes) {
            this.scopes = scopes;
            return this;
        }

        public Builder hasRestrictedSubuserAccess(Object hasRestrictedSubuserAccess) {
            this.hasRestrictedSubuserAccess = hasRestrictedSubuserAccess;
            return this;
        }

        public Builder subuserAccess(Object subuserAccess) {
            this.subuserAccess = subuserAccess;
            return this;
        }

        public PostSsoTeammatesRequest build() {
            return new PostSsoTeammatesRequest(this);
        }

    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(", ", PostSsoTeammatesRequest.class.getSimpleName() + "(", ")");
        if (firstName != null) joiner.add("firstName=" + firstName);
        if (lastName != null) joiner.add("lastName=" + lastName);
        if (isAdmin != null) joiner.add("isAdmin=" + isAdmin);
        if (persona != null) joiner.add("persona=" + persona);
        if (scopes != null) joiner.add("scopes=" + scopes);
        if (hasRestrictedSubuserAccess != null) joiner.add("hasRestrictedSubuserAccess=" + hasRestrictedSubuserAccess);
        if (subuserAccess != null) joiner.add("subuserAccess=" + subuserAccess);
        if (email != null) joiner.add("email=" + email);
        return joiner.toString();
    }

}
         
    
