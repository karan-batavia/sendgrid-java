/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Templates API
 * The Twilio SendGrid Templates API allows you to create and manage email templates to be delivered with SendGrid's sending APIs. The templates you create will be available using a template ID that is passed to our sending APIs as part of the request. Each template may then have multiple versions associated with it. Whichever version is set as \"active\" at the time of the request will be sent to your recipients. This system allows you to update a single template's look and feel entirely without modifying your requests to our Mail Send API. For example, you could have a single template for welcome emails. That welcome template could then have a version for each season of the year that's themed appropriately and marked as active during the appropriate season. The template ID passed to our sending APIs never needs to change; you can just modify which version is active.  This API provides operations to create and manage your templates as well as their versions.  Each user can create up to 300 different templates. Templates are specific to accounts and Subusers. Templates created on a parent account will not be accessible from the Subusers' accounts.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sendgrid.rest.api.v3.templates.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import java.util.List;
import java.util.StringJoiner;


@ToString
public class TransactionalTemplateVersionOutput {
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("active")
    @Getter
    @Setter
    private Active1 active;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("name")
    @Getter
    @Setter
    private Object name;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("htmlContent")
    @Getter
    @Setter
    private Object htmlContent;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("plainContent")
    @Getter
    @Setter
    private Object plainContent;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("generatePlainContent")
    @Getter
    @Setter
    private Object generatePlainContent;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subject")
    @Getter
    @Setter
    private Object subject;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("editor")
    @Getter
    @Setter
    private Editor1 editor;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("testData")
    @Getter
    @Setter
    private Object testData;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private Object id;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("templateId")
    @Getter
    @Setter
    private Object templateId;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("updatedAt")
    @Getter
    @Setter
    private Object updatedAt;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("thumbnailUrl")
    @Getter
    @Setter
    private Object thumbnailUrl;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("warnings")
    @Getter
    @Setter
    private List<TransactionalTemplateWarning> warnings;

    public TransactionalTemplateVersionOutput() {
    }

    private TransactionalTemplateVersionOutput(Builder builder) {
        this.active = builder.active;
        this.name = builder.name;
        this.htmlContent = builder.htmlContent;
        this.plainContent = builder.plainContent;
        this.generatePlainContent = builder.generatePlainContent;
        this.subject = builder.subject;
        this.editor = builder.editor;
        this.testData = builder.testData;
        this.id = builder.id;
        this.templateId = builder.templateId;
        this.updatedAt = builder.updatedAt;
        this.thumbnailUrl = builder.thumbnailUrl;
        this.warnings = builder.warnings;
    }

    // Builder class for constructing object
    public static class Builder {
        private Active1 active;
        private Object name;
        private Object htmlContent;
        private Object plainContent;
        private Object generatePlainContent;
        private Object subject;
        private Editor1 editor;
        private Object testData;
        private Object id;
        private Object templateId;
        private Object updatedAt;
        private Object thumbnailUrl;
        private List<TransactionalTemplateWarning> warnings;

        public Builder(Object name, Object subject) {
            this.name = name;
            this.subject = subject;
        }

        public Builder active(Active1 active) {
            this.active = active;
            return this;
        }

        public Builder htmlContent(Object htmlContent) {
            this.htmlContent = htmlContent;
            return this;
        }

        public Builder plainContent(Object plainContent) {
            this.plainContent = plainContent;
            return this;
        }

        public Builder generatePlainContent(Object generatePlainContent) {
            this.generatePlainContent = generatePlainContent;
            return this;
        }

        public Builder editor(Editor1 editor) {
            this.editor = editor;
            return this;
        }

        public Builder testData(Object testData) {
            this.testData = testData;
            return this;
        }

        public Builder id(Object id) {
            this.id = id;
            return this;
        }

        public Builder templateId(Object templateId) {
            this.templateId = templateId;
            return this;
        }

        public Builder updatedAt(Object updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder thumbnailUrl(Object thumbnailUrl) {
            this.thumbnailUrl = thumbnailUrl;
            return this;
        }

        public Builder warnings(List<TransactionalTemplateWarning> warnings) {
            this.warnings = warnings;
            return this;
        }

        public TransactionalTemplateVersionOutput build() {
            return new TransactionalTemplateVersionOutput(this);
        }

    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(", ", TransactionalTemplateVersionOutput.class.getSimpleName() + "(", ")");
        if (active != null) joiner.add("active=" + active);
        if (name != null) joiner.add("name=" + name);
        if (htmlContent != null) joiner.add("htmlContent=" + htmlContent);
        if (plainContent != null) joiner.add("plainContent=" + plainContent);
        if (generatePlainContent != null) joiner.add("generatePlainContent=" + generatePlainContent);
        if (subject != null) joiner.add("subject=" + subject);
        if (editor != null) joiner.add("editor=" + editor);
        if (testData != null) joiner.add("testData=" + testData);
        if (id != null) joiner.add("id=" + id);
        if (templateId != null) joiner.add("templateId=" + templateId);
        if (updatedAt != null) joiner.add("updatedAt=" + updatedAt);
        if (thumbnailUrl != null) joiner.add("thumbnailUrl=" + thumbnailUrl);
        if (warnings != null) joiner.add("warnings=" + warnings);
        return joiner.toString();
    }

}
         
    
