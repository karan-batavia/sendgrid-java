/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Webhook Configuration API
 * The Twilio SendGrid Webhooks API allows you to configure the Event and Parse Webhooks.  Email is a data-rich channel, and implementing the Event Webhook will allow you to consume those data in nearly real time. This means you can actively monitor and participate in the health of your email program throughout the send cycle.  The Inbound Parse Webhook processes all incoming email for a domain or subdomain, parses the contents and attachments and then POSTs `multipart/form-data` to a URL that you choose.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sendgrid.rest.api.v3.webhooks.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import java.util.StringJoiner;


@ToString
public class EventWebhookSignedResponse {
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("enabled")
    @Getter
    @Setter
    private Object enabled;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("url")
    @Getter
    @Setter
    private Object url;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("accountStatusChange")
    @Getter
    @Setter
    private Object accountStatusChange;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("groupResubscribe")
    @Getter
    @Setter
    private Object groupResubscribe;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("delivered")
    @Getter
    @Setter
    private Object delivered;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("groupUnsubscribe")
    @Getter
    @Setter
    private Object groupUnsubscribe;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("spamReport")
    @Getter
    @Setter
    private Object spamReport;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("bounce")
    @Getter
    @Setter
    private Object bounce;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("deferred")
    @Getter
    @Setter
    private Object deferred;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("unsubscribe")
    @Getter
    @Setter
    private Object unsubscribe;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("processed")
    @Getter
    @Setter
    private Object processed;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("open")
    @Getter
    @Setter
    private Object open;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("click")
    @Getter
    @Setter
    private Object click;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("dropped")
    @Getter
    @Setter
    private Object dropped;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("friendlyName")
    @Getter
    @Setter
    private Object friendlyName;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private Object id;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("createdDate")
    @Getter
    @Setter
    private Object createdDate;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("updatedDate")
    @Getter
    @Setter
    private Object updatedDate;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("oauthClientId")
    @Getter
    @Setter
    private Object oauthClientId;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("oauthTokenUrl")
    @Getter
    @Setter
    private Object oauthTokenUrl;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("publicKey")
    @Getter
    @Setter
    private Object publicKey;

    public EventWebhookSignedResponse() {
    }

    private EventWebhookSignedResponse(Builder builder) {
        this.enabled = builder.enabled;
        this.url = builder.url;
        this.accountStatusChange = builder.accountStatusChange;
        this.groupResubscribe = builder.groupResubscribe;
        this.delivered = builder.delivered;
        this.groupUnsubscribe = builder.groupUnsubscribe;
        this.spamReport = builder.spamReport;
        this.bounce = builder.bounce;
        this.deferred = builder.deferred;
        this.unsubscribe = builder.unsubscribe;
        this.processed = builder.processed;
        this.open = builder.open;
        this.click = builder.click;
        this.dropped = builder.dropped;
        this.friendlyName = builder.friendlyName;
        this.id = builder.id;
        this.createdDate = builder.createdDate;
        this.updatedDate = builder.updatedDate;
        this.oauthClientId = builder.oauthClientId;
        this.oauthTokenUrl = builder.oauthTokenUrl;
        this.publicKey = builder.publicKey;
    }

    // Builder class for constructing object
    public static class Builder {
        private Object enabled;
        private Object url;
        private Object accountStatusChange;
        private Object groupResubscribe;
        private Object delivered;
        private Object groupUnsubscribe;
        private Object spamReport;
        private Object bounce;
        private Object deferred;
        private Object unsubscribe;
        private Object processed;
        private Object open;
        private Object click;
        private Object dropped;
        private Object friendlyName;
        private Object id;
        private Object createdDate;
        private Object updatedDate;
        private Object oauthClientId;
        private Object oauthTokenUrl;
        private Object publicKey;

        public Builder() {
        }

        public Builder enabled(Object enabled) {
            this.enabled = enabled;
            return this;
        }

        public Builder url(Object url) {
            this.url = url;
            return this;
        }

        public Builder accountStatusChange(Object accountStatusChange) {
            this.accountStatusChange = accountStatusChange;
            return this;
        }

        public Builder groupResubscribe(Object groupResubscribe) {
            this.groupResubscribe = groupResubscribe;
            return this;
        }

        public Builder delivered(Object delivered) {
            this.delivered = delivered;
            return this;
        }

        public Builder groupUnsubscribe(Object groupUnsubscribe) {
            this.groupUnsubscribe = groupUnsubscribe;
            return this;
        }

        public Builder spamReport(Object spamReport) {
            this.spamReport = spamReport;
            return this;
        }

        public Builder bounce(Object bounce) {
            this.bounce = bounce;
            return this;
        }

        public Builder deferred(Object deferred) {
            this.deferred = deferred;
            return this;
        }

        public Builder unsubscribe(Object unsubscribe) {
            this.unsubscribe = unsubscribe;
            return this;
        }

        public Builder processed(Object processed) {
            this.processed = processed;
            return this;
        }

        public Builder open(Object open) {
            this.open = open;
            return this;
        }

        public Builder click(Object click) {
            this.click = click;
            return this;
        }

        public Builder dropped(Object dropped) {
            this.dropped = dropped;
            return this;
        }

        public Builder friendlyName(Object friendlyName) {
            this.friendlyName = friendlyName;
            return this;
        }

        public Builder id(Object id) {
            this.id = id;
            return this;
        }

        public Builder createdDate(Object createdDate) {
            this.createdDate = createdDate;
            return this;
        }

        public Builder updatedDate(Object updatedDate) {
            this.updatedDate = updatedDate;
            return this;
        }

        public Builder oauthClientId(Object oauthClientId) {
            this.oauthClientId = oauthClientId;
            return this;
        }

        public Builder oauthTokenUrl(Object oauthTokenUrl) {
            this.oauthTokenUrl = oauthTokenUrl;
            return this;
        }

        public Builder publicKey(Object publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public EventWebhookSignedResponse build() {
            return new EventWebhookSignedResponse(this);
        }

    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(", ", EventWebhookSignedResponse.class.getSimpleName() + "(", ")");
        if (enabled != null) joiner.add("enabled=" + enabled);
        if (url != null) joiner.add("url=" + url);
        if (accountStatusChange != null) joiner.add("accountStatusChange=" + accountStatusChange);
        if (groupResubscribe != null) joiner.add("groupResubscribe=" + groupResubscribe);
        if (delivered != null) joiner.add("delivered=" + delivered);
        if (groupUnsubscribe != null) joiner.add("groupUnsubscribe=" + groupUnsubscribe);
        if (spamReport != null) joiner.add("spamReport=" + spamReport);
        if (bounce != null) joiner.add("bounce=" + bounce);
        if (deferred != null) joiner.add("deferred=" + deferred);
        if (unsubscribe != null) joiner.add("unsubscribe=" + unsubscribe);
        if (processed != null) joiner.add("processed=" + processed);
        if (open != null) joiner.add("open=" + open);
        if (click != null) joiner.add("click=" + click);
        if (dropped != null) joiner.add("dropped=" + dropped);
        if (friendlyName != null) joiner.add("friendlyName=" + friendlyName);
        if (id != null) joiner.add("id=" + id);
        if (createdDate != null) joiner.add("createdDate=" + createdDate);
        if (updatedDate != null) joiner.add("updatedDate=" + updatedDate);
        if (oauthClientId != null) joiner.add("oauthClientId=" + oauthClientId);
        if (oauthTokenUrl != null) joiner.add("oauthTokenUrl=" + oauthTokenUrl);
        if (publicKey != null) joiner.add("publicKey=" + publicKey);
        return joiner.toString();
    }

}
         
    
