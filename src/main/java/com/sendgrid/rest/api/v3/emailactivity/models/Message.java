/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Email Activity API
 * The Twilio SendGrid Email Activity API allows you to query all of your stored messages, query individual messages, and download a CSV with data about the stored messages. Once retrieved, you can inspect the data associated with your messages to better understand your mail send. For example, you may retrieve all bounced messages or all messages with the same subject line and search for commonalities among them.  You must [purchase additional email activity history](https://app.sendgrid.com/settings/billing/addons/email_activity) to gain access to the Email Activity Feed API.  See **Getting Started with the Email Activity Feed API** for help building queries and working with this API. You can also work with email activity in the **Activity** section of the [Twilio SendGrid application user interface](https://app.sendgrid.com/email_activity).
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sendgrid.rest.api.v3.emailactivity.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import java.util.StringJoiner;


@ToString
public class Message {
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("fromEmail")
    @Getter
    @Setter
    private Object fromEmail;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("msgId")
    @Getter
    @Setter
    private Object msgId;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subject")
    @Getter
    @Setter
    private Object subject;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("toEmail")
    @Getter
    @Setter
    private Object toEmail;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("status")
    @Getter
    @Setter
    private Status1 status;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("templateId")
    @Getter
    @Setter
    private Object templateId;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("asmGroupId")
    @Getter
    @Setter
    private Object asmGroupId;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("teammate")
    @Getter
    @Setter
    private Object teammate;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("apiKeyId")
    @Getter
    @Setter
    private Object apiKeyId;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("events")
    @Getter
    @Setter
    private Object events;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("originatingIp")
    @Getter
    @Setter
    private Object originatingIp;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("categories")
    @Getter
    @Setter
    private Object categories;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("uniqueArgs")
    @Getter
    @Setter
    private Object uniqueArgs;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("outboundIp")
    @Getter
    @Setter
    private Object outboundIp;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("outboundIpType")
    @Getter
    @Setter
    private OutboundIpType1 outboundIpType;

    public Message() {
    }

    private Message(Builder builder) {
        this.fromEmail = builder.fromEmail;
        this.msgId = builder.msgId;
        this.subject = builder.subject;
        this.toEmail = builder.toEmail;
        this.status = builder.status;
        this.templateId = builder.templateId;
        this.asmGroupId = builder.asmGroupId;
        this.teammate = builder.teammate;
        this.apiKeyId = builder.apiKeyId;
        this.events = builder.events;
        this.originatingIp = builder.originatingIp;
        this.categories = builder.categories;
        this.uniqueArgs = builder.uniqueArgs;
        this.outboundIp = builder.outboundIp;
        this.outboundIpType = builder.outboundIpType;
    }

    // Builder class for constructing object
    public static class Builder {
        private Object fromEmail;
        private Object msgId;
        private Object subject;
        private Object toEmail;
        private Status1 status;
        private Object templateId;
        private Object asmGroupId;
        private Object teammate;
        private Object apiKeyId;
        private Object events;
        private Object originatingIp;
        private Object categories;
        private Object uniqueArgs;
        private Object outboundIp;
        private OutboundIpType1 outboundIpType;

        public Builder(Object fromEmail, Object msgId, Object subject, Object toEmail, Status1 status, Object templateId, Object asmGroupId, Object teammate, Object apiKeyId, Object events, Object originatingIp, Object categories, Object uniqueArgs, Object outboundIp, OutboundIpType1 outboundIpType) {
            this.fromEmail = fromEmail;
            this.msgId = msgId;
            this.subject = subject;
            this.toEmail = toEmail;
            this.status = status;
            this.templateId = templateId;
            this.asmGroupId = asmGroupId;
            this.teammate = teammate;
            this.apiKeyId = apiKeyId;
            this.events = events;
            this.originatingIp = originatingIp;
            this.categories = categories;
            this.uniqueArgs = uniqueArgs;
            this.outboundIp = outboundIp;
            this.outboundIpType = outboundIpType;
        }

        public Message build() {
            return new Message(this);
        }

    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(", ", Message.class.getSimpleName() + "(", ")");
        if (fromEmail != null) joiner.add("fromEmail=" + fromEmail);
        if (msgId != null) joiner.add("msgId=" + msgId);
        if (subject != null) joiner.add("subject=" + subject);
        if (toEmail != null) joiner.add("toEmail=" + toEmail);
        if (status != null) joiner.add("status=" + status);
        if (templateId != null) joiner.add("templateId=" + templateId);
        if (asmGroupId != null) joiner.add("asmGroupId=" + asmGroupId);
        if (teammate != null) joiner.add("teammate=" + teammate);
        if (apiKeyId != null) joiner.add("apiKeyId=" + apiKeyId);
        if (events != null) joiner.add("events=" + events);
        if (originatingIp != null) joiner.add("originatingIp=" + originatingIp);
        if (categories != null) joiner.add("categories=" + categories);
        if (uniqueArgs != null) joiner.add("uniqueArgs=" + uniqueArgs);
        if (outboundIp != null) joiner.add("outboundIp=" + outboundIp);
        if (outboundIpType != null) joiner.add("outboundIpType=" + outboundIpType);
        return joiner.toString();
    }

}
         
    
