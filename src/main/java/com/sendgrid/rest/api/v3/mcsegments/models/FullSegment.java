/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Marketing Campaigns Segments API
 * This API was deprecated on December 31, 2022. Following deprecation, all segments created in the Marketing Campaigns user interface began using the [Segmentation v2 API](https://docs.sendgrid.com/api-reference/segmenting-contacts-v2).  To enable manual migration and data retrieval, this API's GET and DELETE operations will remain available. The POST (create) and PATCH (update) endpoints were removed on January 31, 2023 because it is no longer possible to create new v1 segments or modify existing ones. See our [Segmentation v1 to v2 upgrade instructions](https://docs.sendgrid.com/for-developers/sending-email/getting-started-the-marketing-campaigns-v2-segmentation-api#upgrade-a-v1-segment-to-v2) to manually migrate your segments to the v2 API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sendgrid.rest.api.v3.mcsegments.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import java.util.List;
import java.util.StringJoiner;


@ToString
public class FullSegment {
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("id")
    @Getter
    @Setter
    private Object id;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("contactsCount")
    @Getter
    @Setter
    private Object contactsCount;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("createdAt")
    @Getter
    @Setter
    private Object createdAt;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("name")
    @Getter
    @Setter
    private Object name;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("parentListId")
    @Getter
    @Setter
    private Object parentListId;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("sampleUpdatedAt")
    @Getter
    @Setter
    private Object sampleUpdatedAt;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("updatedAt")
    @Getter
    @Setter
    private Object updatedAt;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("nextSampleUpdate")
    @Getter
    @Setter
    private Object nextSampleUpdate;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("parentListIds")
    @Getter
    @Setter
    private Object parentListIds;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("queryDsl")
    @Getter
    @Setter
    private Object queryDsl;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("contactsSample")
    @Getter
    @Setter
    private List<ContactResponse> contactsSample;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("queryJson")
    @Getter
    @Setter
    private Object queryJson;

    public FullSegment() {
    }

    private FullSegment(Builder builder) {
        this.id = builder.id;
        this.contactsCount = builder.contactsCount;
        this.createdAt = builder.createdAt;
        this.name = builder.name;
        this.parentListId = builder.parentListId;
        this.sampleUpdatedAt = builder.sampleUpdatedAt;
        this.updatedAt = builder.updatedAt;
        this.nextSampleUpdate = builder.nextSampleUpdate;
        this.parentListIds = builder.parentListIds;
        this.queryDsl = builder.queryDsl;
        this.contactsSample = builder.contactsSample;
        this.queryJson = builder.queryJson;
    }

    // Builder class for constructing object
    public static class Builder {
        private Object id;
        private Object contactsCount;
        private Object createdAt;
        private Object name;
        private Object parentListId;
        private Object sampleUpdatedAt;
        private Object updatedAt;
        private Object nextSampleUpdate;
        private Object parentListIds;
        private Object queryDsl;
        private List<ContactResponse> contactsSample;
        private Object queryJson;

        public Builder(Object id, Object contactsCount, Object createdAt, Object name, Object sampleUpdatedAt, Object updatedAt, Object queryDsl, List<ContactResponse> contactsSample) {
            this.id = id;
            this.contactsCount = contactsCount;
            this.createdAt = createdAt;
            this.name = name;
            this.sampleUpdatedAt = sampleUpdatedAt;
            this.updatedAt = updatedAt;
            this.queryDsl = queryDsl;
            this.contactsSample = contactsSample;
        }

        public Builder parentListId(Object parentListId) {
            this.parentListId = parentListId;
            return this;
        }

        public Builder nextSampleUpdate(Object nextSampleUpdate) {
            this.nextSampleUpdate = nextSampleUpdate;
            return this;
        }

        public Builder parentListIds(Object parentListIds) {
            this.parentListIds = parentListIds;
            return this;
        }

        public Builder queryJson(Object queryJson) {
            this.queryJson = queryJson;
            return this;
        }

        public FullSegment build() {
            return new FullSegment(this);
        }

    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(", ", FullSegment.class.getSimpleName() + "(", ")");
        if (id != null) joiner.add("id=" + id);
        if (contactsCount != null) joiner.add("contactsCount=" + contactsCount);
        if (createdAt != null) joiner.add("createdAt=" + createdAt);
        if (name != null) joiner.add("name=" + name);
        if (parentListId != null) joiner.add("parentListId=" + parentListId);
        if (sampleUpdatedAt != null) joiner.add("sampleUpdatedAt=" + sampleUpdatedAt);
        if (updatedAt != null) joiner.add("updatedAt=" + updatedAt);
        if (nextSampleUpdate != null) joiner.add("nextSampleUpdate=" + nextSampleUpdate);
        if (parentListIds != null) joiner.add("parentListIds=" + parentListIds);
        if (queryDsl != null) joiner.add("queryDsl=" + queryDsl);
        if (contactsSample != null) joiner.add("contactsSample=" + contactsSample);
        if (queryJson != null) joiner.add("queryJson=" + queryJson);
        return joiner.toString();
    }

}
         
    
