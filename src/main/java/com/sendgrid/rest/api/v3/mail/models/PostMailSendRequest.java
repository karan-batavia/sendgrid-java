/*
 * This code was generated by
 *
 * SENDGRID-OAI-GENERATOR
 *
 * Twilio SendGrid Mail API
 * The Twilio SendGrid v3 Mail API allows you to send email at scale over HTTP. The Mail Send endpoint supports many levels of functionality, allowing you to send templates, set categories and custom arguments that can be used to analyze your send, and configure which tracking settings to include such as opens and clicks. You can also group mail sends into batches, allowing you to schedule and cancel sends by their batch IDs.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.sendgrid.rest.api.v3.mail.models;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.Getter;
import lombok.Setter;
import lombok.ToString;

import java.util.List;
import java.util.StringJoiner;


@ToString
public class PostMailSendRequest {
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("personalizations")
    @Getter
    @Setter
    private List<PostMailSendRequestPersonalizationsInner> personalizations;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("from")
    @Getter
    @Setter
    private MailFrom from;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("replyTo")
    @Getter
    @Setter
    private MailTo replyTo;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("replyToList")
    @Getter
    @Setter
    private List<MailTo> replyToList;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("subject")
    @Getter
    @Setter
    private String subject;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("content")
    @Getter
    @Setter
    private List<PostMailSendRequestContentInner> content;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("attachments")
    @Getter
    @Setter
    private List<PostMailSendRequestAttachmentsInner> attachments;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("templateId")
    @Getter
    @Setter
    private String templateId;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("headers")
    @Getter
    @Setter
    private Object headers;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("categories")
    @Getter
    @Setter
    private List<String> categories;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("customArgs")
    @Getter
    @Setter
    private String customArgs;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("sendAt")
    @Getter
    @Setter
    private Integer sendAt;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("batchId")
    @Getter
    @Setter
    private String batchId;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("asm")
    @Getter
    @Setter
    private PostMailSendRequestAsm asm;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("ipPoolName")
    @Getter
    @Setter
    private String ipPoolName;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("mailSettings")
    @Getter
    @Setter
    private PostMailSendRequestMailSettings mailSettings;
    @JsonInclude(JsonInclude.Include.NON_EMPTY)
    @JsonProperty("trackingSettings")
    @Getter
    @Setter
    private PostMailSendRequestTrackingSettings trackingSettings;

    public PostMailSendRequest() {
    }

    private PostMailSendRequest(Builder builder) {
        this.personalizations = builder.personalizations;
        this.from = builder.from;
        this.replyTo = builder.replyTo;
        this.replyToList = builder.replyToList;
        this.subject = builder.subject;
        this.content = builder.content;
        this.attachments = builder.attachments;
        this.templateId = builder.templateId;
        this.headers = builder.headers;
        this.categories = builder.categories;
        this.customArgs = builder.customArgs;
        this.sendAt = builder.sendAt;
        this.batchId = builder.batchId;
        this.asm = builder.asm;
        this.ipPoolName = builder.ipPoolName;
        this.mailSettings = builder.mailSettings;
        this.trackingSettings = builder.trackingSettings;
    }

    // Builder class for constructing object
    public static class Builder {
        private List<PostMailSendRequestPersonalizationsInner> personalizations;
        private MailFrom from;
        private MailTo replyTo;
        private List<MailTo> replyToList;
        private String subject;
        private List<PostMailSendRequestContentInner> content;
        private List<PostMailSendRequestAttachmentsInner> attachments;
        private String templateId;
        private Object headers;
        private List<String> categories;
        private String customArgs;
        private Integer sendAt;
        private String batchId;
        private PostMailSendRequestAsm asm;
        private String ipPoolName;
        private PostMailSendRequestMailSettings mailSettings;
        private PostMailSendRequestTrackingSettings trackingSettings;

        public Builder(List<PostMailSendRequestPersonalizationsInner> personalizations, MailFrom from) {
            this.personalizations = personalizations;
            this.from = from;
        }

        public Builder replyTo(MailTo replyTo) {
            this.replyTo = replyTo;
            return this;
        }

        public Builder replyToList(List<MailTo> replyToList) {
            this.replyToList = replyToList;
            return this;
        }

        public Builder subject(String subject) {
            this.subject = subject;
            return this;
        }

        public Builder content(List<PostMailSendRequestContentInner> content) {
            this.content = content;
            return this;
        }

        public Builder attachments(List<PostMailSendRequestAttachmentsInner> attachments) {
            this.attachments = attachments;
            return this;
        }

        public Builder templateId(String templateId) {
            this.templateId = templateId;
            return this;
        }

        public Builder headers(Object headers) {
            this.headers = headers;
            return this;
        }

        public Builder categories(List<String> categories) {
            this.categories = categories;
            return this;
        }

        public Builder customArgs(String customArgs) {
            this.customArgs = customArgs;
            return this;
        }

        public Builder sendAt(Integer sendAt) {
            this.sendAt = sendAt;
            return this;
        }

        public Builder batchId(String batchId) {
            this.batchId = batchId;
            return this;
        }

        public Builder asm(PostMailSendRequestAsm asm) {
            this.asm = asm;
            return this;
        }

        public Builder ipPoolName(String ipPoolName) {
            this.ipPoolName = ipPoolName;
            return this;
        }

        public Builder mailSettings(PostMailSendRequestMailSettings mailSettings) {
            this.mailSettings = mailSettings;
            return this;
        }

        public Builder trackingSettings(PostMailSendRequestTrackingSettings trackingSettings) {
            this.trackingSettings = trackingSettings;
            return this;
        }

        public PostMailSendRequest build() {
            return new PostMailSendRequest(this);
        }

    }

    @Override
    public String toString() {
        StringJoiner joiner = new StringJoiner(", ", PostMailSendRequest.class.getSimpleName() + "(", ")");
        if (personalizations != null) joiner.add("personalizations=" + personalizations);
        if (from != null) joiner.add("from=" + from);
        if (replyTo != null) joiner.add("replyTo=" + replyTo);
        if (replyToList != null) joiner.add("replyToList=" + replyToList);
        if (subject != null) joiner.add("subject=" + subject);
        if (content != null) joiner.add("content=" + content);
        if (attachments != null) joiner.add("attachments=" + attachments);
        if (templateId != null) joiner.add("templateId=" + templateId);
        if (headers != null) joiner.add("headers=" + headers);
        if (categories != null) joiner.add("categories=" + categories);
        if (customArgs != null) joiner.add("customArgs=" + customArgs);
        if (sendAt != null) joiner.add("sendAt=" + sendAt);
        if (batchId != null) joiner.add("batchId=" + batchId);
        if (asm != null) joiner.add("asm=" + asm);
        if (ipPoolName != null) joiner.add("ipPoolName=" + ipPoolName);
        if (mailSettings != null) joiner.add("mailSettings=" + mailSettings);
        if (trackingSettings != null) joiner.add("trackingSettings=" + trackingSettings);
        return joiner.toString();
    }

}
         
    
